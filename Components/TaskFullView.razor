@inject ICommentService _commentService
@inject ISnackbar _alert
@inject IConfiguration configuration
@inject IFileService _fileService
@using PlannerApp.Database.Services
@using PlannerApp.Helpers
<MudDialog>
    <DialogContent>
       
            <MudContainer MaxWidth="MaxWidth.Medium">
                <br>
                <div>
                    <MudText Typo="Typo.body1">
                         @model.TaskDescription
                    </MudText>
                </div>
                   
                
                <br>
                <br>
            
                @if(files.Count > 0)
                {

                    @foreach(var item in files)
                    {
                        
                        <FilesTask Path="@item.path" NameFile="@item.name"></FilesTask>
                    }
                }
                <MudFileUpload T="IBrowserFile" OnFilesChanged="UploadFiles">
                <ButtonTemplate>
                    <MudButton HtmlTag="label"
                            Variant="Variant.Filled"
                            Color="Color.Success"
                            for="@context">
                        Sube tu archivo
                    </MudButton>
                </ButtonTemplate>
                <SelectedTemplate>
                    @if (context != null)
                    {
                        <MudText>@context.Name</MudText>
                    }
                    
                </SelectedTemplate>
            </MudFileUpload>
                <br>
                <br>
                <MudTextField T="string"  Variant="Variant.Outlined" Lines="3" Label="Escribe tu comentario" @bind-Value="commentModel.Comment" Required="true" RequiredError="Debes escribir un comentario"></MudTextField>
                <div class="d-flex justify-end">
                    <div class="mr-2">
                        <MudButton Color="Color.Success" OnClick="CreateComment">Guardar Comentario</MudButton>
                    </div> 
                </div>
                <br>
                <br>
                <MudText Typo="Typo.caption">Comentarios</MudText>
                <div class="m-0 overflow-auto" style="height: 10vh;">
                    <MudPaper Elevation="0" class="d-flex flex-column justify-space-between py-6">
                        @foreach(var comment in comments)
                        {
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.body2">@comment.Comment</MudText>
                                </MudCardContent>
                            </MudCard>
                        }
                    </MudPaper>
                </div>
            </MudContainer>
        
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Cerrar</MudButton>
    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }

    [Parameter, EditorRequired]
    public Taskes? model {get;set;}

    private Comments commentModel = new Comments();

    private List<Comments> comments = new List<Comments>();

    private List<FileItem> files = new List<FileItem>();


    
    public MudBlazor.Color ColorState {get;set;}

      private void Close()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    protected override async Task OnInitializedAsync()
    {   
        _commentService.SetIdTask(model.TaskId);
        comments = await _commentService.GetComments();
        files = await _fileService.GetFiles(model.TaskId);
    }
    public async Task CreateComment()
    {   
        if(!String.IsNullOrEmpty(commentModel.Comment))
        {
            commentModel.CommentTaskId = model.TaskId;
            var result = await _commentService.CreateComment(commentModel);
            if(result != null)
            {
                _alert.Add("Acabas de crear un comentario nuevo", Severity.Success);
                await OnParametersSetAsync();
                commentModel.Comment = string.Empty;
            }

        }
        //comments = await _commentService.GetComments();
    }

    protected override async Task OnParametersSetAsync()
    {
        comments = await _commentService.GetComments();
        StateHasChanged();
    }


     private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        var type = e.File.ContentType;
        if(type.Contains("image") && (type.Split("/")[1] == "jpeg" || type.Split("/")[1] == "png" || type.Split("/")[1] == "jpg")){
            var client  = new HttpClient();
            //If SuppressOnChangeWhenInvalid is false, perform your validations here
            
            var formData = new MultipartFormDataContent();
            formData.Add(new StreamContent(e.File.OpenReadStream()), "file", e.File.Name);
            formData.Add(new StringContent(model.TaskId.ToString()), "id");
            var url = DataHelper.GetApiUrl(configuration)+"/files";
            var response = await client.PostAsync(url,formData);
            if(response.IsSuccessStatusCode)
            {
                _alert.Add("Acabas de subir un archivo", Severity.Success);
                files = await _fileService.GetFiles(model.TaskId);
                StateHasChanged();
            }
            else{
                _alert.Add("No se pudo procesar el archivo vuelve a intentarlo", Severity.Warning);
            }
        }else{
            _alert.Add("El archivo debe ser una imagen", Severity.Warning);
        }
        //TODO upload the files to the server   
    }



}