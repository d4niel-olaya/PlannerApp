@inject ICommentService _commentService
@inject ISnackbar _alert

<MudDialog>
    <DialogContent>
       
            <MudContainer MaxWidth="MaxWidth.Medium">
                <br>
                <div>
                    <MudText Typo="Typo.body1">
                         @model.TaskDescription
                    </MudText>
                </div>
                   
                
                <br>
                
            
                <MudTextField T="string"  Variant="Variant.Outlined" Lines="3" Label="Escribe tu comentario" @bind-Value="commentModel.Comment" Required="true" RequiredError="Debes escribir un comentario"></MudTextField>
                <MudButton Color="Color.Success" OnClick="CreateComment">Guardar Comentario</MudButton>
                <br>
                <MudText Typo="Typo.caption">Comentarios</MudText>
                <div class="m-0 overflow-auto" style="height: 10vh;">
                    <MudPaper Elevation="0" class="d-flex flex-column justify-space-between py-6">
                        @foreach(var comment in comments)
                        {
                            <MudCard>
                                <MudCardContent>
                                    <MudText Typo="Typo.body2">@comment.Comment</MudText>
                                </MudCardContent>
                            </MudCard>
                        }
                    </MudPaper>
                </div>
            </MudContainer>
        
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Cerrar</MudButton>
    </DialogActions>
</MudDialog>

@code{
    [CascadingParameter] 
    MudDialogInstance MudDialog { get; set; }

    [Parameter, EditorRequired]
    public Taskes? model {get;set;}

    private Comments commentModel = new Comments();

    private List<Comments> comments = new List<Comments>();
    
    public MudBlazor.Color ColorState {get;set;}

      private void Close()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    protected override async Task OnInitializedAsync()
    {   
        _commentService.SetIdTask(model.TaskId);
        comments = await _commentService.GetComments();
    }
    public async Task CreateComment()
    {   
        if(!String.IsNullOrEmpty(commentModel.Comment))
        {
            commentModel.CommentTaskId = model.TaskId;
            var result = await _commentService.CreateComment(commentModel);
            if(result != null)
            {
                _alert.Add("Acabas de crear un comentario nuevo", Severity.Success);
                await OnParametersSetAsync();
            }

        }
        //comments = await _commentService.GetComments();
    }

    protected override async Task OnParametersSetAsync()
    {
        comments = await _commentService.GetComments();
        StateHasChanged();
    }




}