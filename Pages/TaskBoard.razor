@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@using PlannerApp.Database.Models
@inject IDialogService DialogService
@inject ITaskService _taskService
@page "/tasks/{id:int}/{created?}"

<div class="d-flex justify-start">
    <div class="ml-3">
        <MudButton  StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2" OnClick="OpenDialog">Agregar tarea</MudButton>
    </div>
</div>
<MudDropContainer T="Taskes" Items="_items" ItemsSelector="@((item,dropzone) => item.TaskState== dropzone)"
    ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1 overflow-x-scroll">
    <ChildContent>
        
        <MudDropZone T="Taskes" Identifier="Pendiente"
            Class="rounded mud-background-gray pa-12 ma-8 flex-grow-1">


            <MudText Typo="Typo.h6" Class="mb-4">Pendiente</MudText>

        </MudDropZone>


        <MudDropZone T="Taskes" Identifier="En Proceso"
            Class="rounded mud-background-gray pa-12 ma-8 flex-grow-1">


            <MudText Typo="Typo.h6" Class="mb-4">En Proceso</MudText>

        </MudDropZone>


        <MudDropZone T="Taskes" Identifier="Completada"
            Class="rounded mud-background-gray pa-12 ma-8 flex-grow-1">

            <MudText Typo="Typo.h6" Class="mb-4">Completada</MudText>

        </MudDropZone>
        


    </ChildContent>
    <ItemRenderer>


        <MudPaper Elevation="25" Class="pa-4 my-4" onclick="@(() => OpenTask(context))">
            <div class="d-flex align-center gap-4">
                <div>

                     <MudIcon Color="@states[context.TaskState]" Icon="@Icons.Material.Filled.Circle" Size="Size.Small"></MudIcon>
                </div>
                <div>

                    @context.TaskName
                </div>
            </div>

        </MudPaper>

    </ItemRenderer>
</MudDropContainer>

@code {

    [Parameter]
    public int id { get; set; }

     [Parameter]
    public string created {get;set;} = string.Empty;

    private bool NewTaskOpen {get;set;}

    private async Task ItemUpdated(MudItemDropInfo<Taskes> dropItem)
    {
        var TaskToUpdate = dropItem.Item == null ? new Taskes() : dropItem.Item;
        TaskToUpdate.TaskState = dropItem.DropzoneIdentifier; // setting DropZoneIdentifier as Task State
        var TaskUpdated = await _taskService.UpdateTask(TaskToUpdate);
        if (TaskUpdated != null)
        {
            dropItem.Item.TaskState = dropItem.DropzoneIdentifier;
        }
    }


    private List<Taskes> _items = new();



    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth=true };
        var parameters = new DialogParameters<TaskCreate>();
        parameters.Add("IdProject", id);
         DialogService.Show<TaskCreate>("Crea tu tarea", parameters,options);
        
    }

    private void OpenTask(Taskes model)
    {
        var options = new DialogOptions{CloseOnEscapeKey=true, MaxWidth = MaxWidth.Medium, FullWidth=true};
        var parameters = new DialogParameters<TaskFullView>();
        parameters.Add("model", model);
        DialogService.Show<TaskFullView>($"{model.TaskName}", parameters,options); // Adding full view task
    }

    protected override async Task OnInitializedAsync()
    {
        _taskService.SetProjectId(id);
        _items = await _taskService.GetTaskes();
    }

    protected override async Task OnParametersSetAsync()
        {
            if(created != String.Empty)
            {
                _items = await _taskService.GetTaskes();
                base.StateHasChanged();
            }

        }

    Dictionary<string, MudBlazor.Color> states = new Dictionary<string, MudBlazor.Color>(){
            {"Completada", MudBlazor.Color.Success},
            {"Pendiente", MudBlazor.Color.Warning},
            {"En Proceso", MudBlazor.Color.Info}
        };

       

}