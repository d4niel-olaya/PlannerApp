@using Microsoft.AspNetCore.Components
@using PlannerApp.Auth
@layout LoginLayout
@inject UserAccountService userService
@inject IJSRuntime js
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider authProvider
@inject UserTemp _userTemp
@inject UserLocalStorage localStorage

@page "/login"





<MudCard Outlined="false" Elevation="0">
    <MudCardContent>
            <MudText Typo="Typo.h3" Align="Align.Center" >Iniciar sesión</MudText>
            <div class="space-top">
                <MudTextField T="string" Label="Usuario" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Person" @bind-Value="_model.UserName" />
            </div>
            <div class="space-top">
                <MudTextField T="string"  Label="Contraseña" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password"  @bind-Value="_model.Password" @onkeydown="@AuthenticateEnter"/>
            </div>
            <MudButton Variant="Variant.Filled" FullWidth="true"  Style="@($"background:#3AB394;margin-top:1rem;color:white;")" OnClick="Authenticate" >Inicia sesión</MudButton>
            <div class="space-top">
                <MudText Typo="Typo.subtitle1" Align="Align.Center">No tienes una cuenta? <MudLink Href="/register">Crea una</MudLink></MudText>
            </div>
    </MudCardContent>
</MudCard>

@code {
    private class Model{
        public string UserName {get;set;} = string.Empty;

        public string Password {get;set;} = string.Empty;
    }

    private Model _model = new Model();

    string ColorInput = Colors.LightBlue.Accent1;
    bool isShow;
    InputType PasswordInput = InputType.Password;

   
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
     void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task Authenticate()
    {
        var userAccount = await userService.GetUser(_model.UserName);
        if(userAccount == null || userAccount.Password != _model.Password)
        {   
            await js.InvokeVoidAsync("alert", "Contraseña invalida");
            return;
        }
        //await localStorage.SetAsync("Id",userAccount.UserId);
        var customAuthProvider = (CustomAuthenticacion)authProvider;
        await localStorage.SetId(userAccount.UserId);
        await customAuthProvider.UpdateAuthenticacionState(new UserSession{
            UserName = userAccount.User,
            Role = userAccount.Role
        });

       
        navigationManager.NavigateTo("/dashboard",true);
    }


    async Task AuthenticateEnter(KeyboardEventArgs e)
    {
        if(e.Code == "Enter" || e.Code == "NumpadEnter") // Validate the key
        {

            var userAccount = await userService.GetUser(_model.UserName);
            if(userAccount == null || userAccount.Password != _model.Password)
            {   
                await js.InvokeVoidAsync("alert", "Contraseña invalida");
                return;
            }
            //await localStorage.SetAsync("Id",userAccount.UserId);
            var customAuthProvider = (CustomAuthenticacion)authProvider;
            await localStorage.SetId(userAccount.UserId);
            await customAuthProvider.UpdateAuthenticacionState(new UserSession{
                UserName = userAccount.User,
                Role = userAccount.Role
            });

        
            navigationManager.NavigateTo("/dashboard",true);
        }
    }
}