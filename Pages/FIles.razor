@page "/files"


<InputFile OnChange="HandleFileUpload"/>


<button onclick="GetFileList">Get Files list</button>

@if(fileList.Count > 0)
{
    @foreach(var file in fileList)
    {
        <div>
            <p>@file</p>
        </div>
    }
}

@code{

    private List<string> fileList = new List<string>();
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
{
    var file = e.File;
    if (file != null)
    {
       
        // Accede al volumen montado usando las variables de entorno de Railway
        var volumeName = Environment.GetEnvironmentVariable("RAILWAY_VOLUME_NAME");
        var volumeMountPath = Environment.GetEnvironmentVariable("RAILWAY_VOLUME_MOUNT_PATH");

        if (!string.IsNullOrEmpty(volumeName) && !string.IsNullOrEmpty(volumeMountPath))
        {
            // Crea una ruta completa al directorio dentro del volumen
            var directoryPath = Path.Combine(volumeMountPath, "archivos");

            // Asegúrate de que el directorio exista o créalo si no existe
            Directory.CreateDirectory(directoryPath);

            // Guarda el archivo dentro del directorio
            var filePath = Path.Combine(directoryPath, file.Name);
            await using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream().CopyToAsync(stream);
                
            }

            // Realiza aquí cualquier otra lógica necesaria, como guardar la ruta del archivo en tu base de datos.
        }
    }
}

    private void GetFileList()
    {
        // Accede al volumen montado usando las variables de entorno de Railway
        var volumeMountPath = Environment.GetEnvironmentVariable("RAILWAY_VOLUME_MOUNT_PATH");

        if (!string.IsNullOrEmpty(volumeMountPath))
        {
            // Crea una ruta completa al directorio dentro del volumen
            var directoryPath = Path.Combine(volumeMountPath, "archivos");

            if (Directory.Exists(directoryPath))
            {
                // Utiliza Directory.GetFiles() o Directory.EnumerateFiles() para obtener la lista de archivos
                // Directory.GetFiles() devuelve una matriz de cadenas con los nombres de archivo completos
                // Directory.EnumerateFiles() devuelve un IEnumerable<string> para la iteración eficiente de archivos
                fileList = Directory.EnumerateFiles(directoryPath).ToList();
            }
        }
    }

}