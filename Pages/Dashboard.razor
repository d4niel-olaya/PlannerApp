@page "/dashboard/{created?}"
@attribute [Authorize]
@using PlannerApp.Auth
@inject IProjectService _projectService
@inject IDialogService DialogService
@inject UserTemp _userTemp
@inject NavigationManager navigation


<MudContainer>
    <MudContainer MaxWidth="MaxWidth.Large" Class="d-flex justify-space-around align-center mt-8">
        <div>
            <MudText Typo="Typo.h4">Proyectos</MudText>
        </div>
        <div>
            <MudFab Style="@($"background:#3AB394;color:white;")" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenDialog" Size="Size.Small" Label="Nuevo"/>
        </div>
    </MudContainer>
        <MudGrid Justify="Justify.Center" class="mt-3">
        
            @if(ListProjects.Count > 0)
            {
                @foreach(var prj in ListProjects)
                {
                    <MudItem xs="6" sm="3" onclick="@GoToTask">
                        <ProjectComponent project="prj"/>   
                    </MudItem>
                }
            }
        </MudGrid>
</MudContainer>
@code{
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState {get;set;}

    [Parameter]
    public string created {get;set;} = string.Empty;

    
    public int UserId {get;set;}
    public List<PlannerApp.Database.Models.Project> ListProjects = new List<PlannerApp.Database.Models.Project>();

       

    protected override async Task OnInitializedAsync() 
    {
        ListProjects = await InitializedProjects();
    }
    // reload the component if route parameter was passed
        protected override async Task OnParametersSetAsync()
        {
            if(created != String.Empty)
            {
                ListProjects = await InitializedProjects();
                base.StateHasChanged();
            }

        }


    // return List of projects
    public async Task<List<Project>> InitializedProjects()
    {
        return await _projectService.GetProjects();
    }



    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        
        DialogService.Show<ProjectCreate>("Crea tu proyecto", options);
        
    }

    public async Task CreateProject(Project model)
    {
        await _projectService.CreateProject(model);
    }
    

    public void GoToTask()
    {
        navigation.NavigateTo("/dropzone");
    }
}